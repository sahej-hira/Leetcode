# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        
        if not root: return root
        #print("key:",key)
        if key > root.val:
            #print("key greater than root val")
            root.right = self.deleteNode(root.right,key)
        elif key < root.val:
            #print("key lesser than root val")
            root.left = self.deleteNode(root.left, key)
        else:
            # when root.val == key: implementing deletion of node

            # deletion of nodes:
            if not root.left:
                return root.right
            if not root.right:
                return root.left

            # find the min value of the right subtree:
            cur = root.right
            while cur.left:
                cur = cur.left  # keep travesing to the left until the reach the leftmost node of the right subtree(=> smallest element of the right subtree) to replace the parent and maintian the structure of the BST.
            root.val = cur.val
            #print("searching for smallest root.val on the right subtree")
            root.right = self.deleteNode(root.right, root.val)
        return root

# testcases generated by me:
# [11, 7, 16, 2, 8, 14, 17, 0, 3, null, 10, 13, 15, null, 20, null, null, null, 4, null, null, 12], key = 11
# [11, 7, 16, 2, 8, 14, 17, 0, 3, null, 10, 13, 15, null, 20, null, null, null, 4, null, null, 12], key = 2